import AbraLib;

// returns the n-th factorial number
// Java equivalent:
// return (n == 0) ? 1 : (n * factorial(n - 1));

// funny enough the maximum value for n! which still fits
// in a Huge integer is 33: 8.68331761881188649551819440128e+36

func [Huge] factorial (n [Huge]) = {

  isZero = equal[sign<Huge>(n), 0];

  // use null in recursion case when n was 0
  altN = nullOr<Huge>(not[isZero], n);

  // calculate n - 1 for recursion case
  nMin1 = dec<Huge>(altN);

  next = mul<Huge>(n, factorial(nMin1));

  return nullOr<Huge>(isZero, 1) \ next[0..Huge - 1];
};
