import AbraLib;

// returns the n-th Fibonacci number
// Java equivalent:
// return (n == 0 || n == 1) ? n : (fib(n - 1) + fib(n - 2));

type FibInt [Int];

func [FibInt] fibonacci (n [FibInt]) = {

  // check if n equals 0 or 1, which means return n
  retN = or[equal<FibInt>(n, 0), equal<FibInt>(n, 1)];

  // use null in recursion case when n was 0 or 1
  altN = nullOr<FibInt>(not[retN], n);

  // calculate n - 1 for recursion case
  nMin1 = dec<FibInt>(altN);

  // calculate n - 2 for recursion case
  nMin2 = dec<FibInt>(nMin1);

  fib1 = fibonacci(nMin1);

  fib2 = fibonacci(nMin2);

  nextFib = add<FibInt>(fib1, fib2);

  return nullOr<FibInt>(retN, n) \ nextFib;
};
