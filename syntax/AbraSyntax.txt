abra::= (abraStmt  ';')*

abraStmt ::= importStmt | typeStmt | lutStmt | funcStmt | templateStmt | useStmt


importStmt ::= 'import' ((pathName) ( '/' pathName)*)

typeStmt ::= 'type' typeName (typeSize | ('{' (fieldName typeSize ';')+ '}'))

lutStmt ::= 'lut' lutName '[' (tritList '=' tritList ';')+ ']'

funcStmt ::= 'func' funcDefinition

templateStmt ::= 'template' templateName '<' (placeHolderTypeName (',' placeHolderTypeName)*) '>' funcDefinition

useStmt ::= 'use' templateName '<' (typeName (',' typeName)*) '>'


funcDefinition ::= funcName ('<' typeName '>')? '(' ((paramName typeSize)(',' (paramName typeSize))*) ')' typeSize '=' funcBody

funcBody ::= mergeExpr | ('{' (assignExpr ';')* 'return' mergeExpr ';' '}')

assignExpr ::= ('state')? varName typeSize? '=' mergeExpr

mergeExpr ::= concatExpr ('\' concatExpr)*

concatExpr ::= postfixExpr ('&' postfixExpr)*

postfixExpr ::= integer | typeExpr | funcExpr | lutExpr | sliceExpr | ('(' mergeExpr ')')


typeExpr ::= typeName '{' (fieldName '=' mergeExpr ';')+ '}'

funcExpr ::= funcName ('<' typeName '>')? '(' (mergeExpr (',' mergeExpr)*) ')'

lutExpr ::= lutName '[' (mergeExpr (',' mergeExpr)*) ']'

sliceExpr ::= (varName | paramName) ('.' fieldName)* ('[' constExpr ('..' constExpr?)? ']')?


constExpr ::= constTerm ([-+] constTerm)*

constTerm ::= constFactor ([*/%] constFactor)*

constFactor ::= number | typeName | ('-' constFactor) | ('(' constExpr ')')


typeSize ::= '[' constExpr ']'

tritList ::= trit (',' trit)*


trit ::= [-01]

name ::= [a-zA-Z_][0-9a-zA-Z_]*

number ::= [0-9]+

integer ::= trit | number | ('-' number)
