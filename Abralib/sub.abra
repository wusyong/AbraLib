import AbraLib/types;

import AbraLib/fullAdd;
import AbraLib/neg;

// implement subtraction by adding the negative value
// exploits that A - B is equivalent to A + (-B)

// note that we can also copy the entire add functionality
// and replace the halfAdd LUT with one that has the second
// trit column negated which ends up in more efficient code
// because we don't have to do the negate before adding

template subFunc<T> [T] sub<T> (lhs [T], rhs [T]) = {
  // use full adder but don't return the carry trit
  sum = fullAdd<T>(lhs, neg<T>(rhs), 0);
  return sum[1..];
};

use subFunc<Trit>;
use subFunc<Tryte>;
use subFunc<Tiny>;
use subFunc<Int>;
use subFunc<Huge>;
use subFunc<Hash>;
use subFunc<Hash3>;
use subFunc<Hash9>;
use subFunc<Signature>;

use subFunc<Trit2>;
use subFunc<Tryte2>;
use subFunc<Tiny2>;
use subFunc<Int2>;
use subFunc<Huge2>;
