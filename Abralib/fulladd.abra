import AbraLib/types

// LUT logic: return the sum of two trits plus a carry as a single trit plus a new carry
//            return newcarry(trit1 + trit2 + carry), (trit1 + trit2 + carry);
fullAdd [
  -,-,- = -,0;
  -,-,0 = -,1;
  -,-,1 = 0,-;
  -,0,- = -,1;
  -,0,0 = 0,-;
  -,0,1 = 0,0;
  -,1,- = 0,-;
  -,1,0 = 0,0;
  -,1,1 = 0,1;
  0,-,- = -,1;
  0,-,0 = 0,-;
  0,-,1 = 0,0;
  0,0,- = 0,-;
  0,0,0 = 0,0;
  0,0,1 = 0,1;
  0,1,- = 0,0;
  0,1,0 = 0,1;
  0,1,1 = 1,-;
  1,-,- = 0,-;
  1,-,0 = 0,0;
  1,-,1 = 0,1;
  1,0,- = 0,0;
  1,0,0 = 0,1;
  1,0,1 = 1,-;
  1,1,- = 0,1;
  1,1,0 = 1,-;
  1,1,1 = 1,0;
];

fullAddTrit (lhs [Trit], rhs [Trit], carry [Trit]) = fullAdd[lhs, rhs, carry];

template fullAddFunc<T, P> fullAdd<T> (lhs [T], rhs [T], carry [Trit]) = {
  add0 = fullAdd<P>(lhs[P * 0..], rhs[P * 0..], carry);
  add1 = fullAdd<P>(lhs[P * 1..], rhs[P * 1..], add0[0]);
  add2 = fullAdd<P>(lhs[P * 2..], rhs[P * 2..], add1[0]);
  add2[0], add0[1..], add1[1..], add2[1..];
}

fullAddFunc<Tryte, Trit>;
fullAddFunc<Tiny, Tryte>;
fullAddFunc<Int, Tiny>;
fullAddFunc<Huge, Int>;
fullAddFunc<Hash, Huge>;
fullAddFunc<Hash3, Hash>;
fullAddFunc<Hash9, Hash3>;
fullAddFunc<Signature, Hash9>;
