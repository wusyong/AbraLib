import AbraLib/types;

// LUT logic: return the sum of two trits plus a carry as a single trit plus a new carry
//            return (trit1 + trit2 + carry), newcarry(trit1 + trit2 + carry);
lut fullAdd [
  -,-,- = 0,-;
  -,-,0 = 1,-;
  -,-,1 = -,0;
  -,0,- = 1,-;
  -,0,0 = -,0;
  -,0,1 = 0,0;
  -,1,- = -,0;
  -,1,0 = 0,0;
  -,1,1 = 1,0;
  0,-,- = 1,-;
  0,-,0 = -,0;
  0,-,1 = 0,0;
  0,0,- = -,0;
  0,0,0 = 0,0;
  0,0,1 = 1,0;
  0,1,- = 0,0;
  0,1,0 = 1,0;
  0,1,1 = -,1;
  1,-,- = -,0;
  1,-,0 = 0,0;
  1,-,1 = 1,0;
  1,0,- = 0,0;
  1,0,0 = 1,0;
  1,0,1 = -,1;
  1,1,- = 1,0;
  1,1,0 = -,1;
  1,1,1 = 0,1;
];

func [Trit + Carry] fullAdd<Trit> (lhs [Trit], rhs [Trit], carry [Carry]) = fullAdd[lhs, rhs, carry];

template fullAddFunc<T, P> [T + Carry] fullAdd<T> (lhs [T], rhs [T], carry [Carry]) = {
  add0 = fullAdd<P>(lhs[P * 0 : P], rhs[P * 0 : P], carry);
  add1 = fullAdd<P>(lhs[P * 1 : P], rhs[P * 1 : P], add0[P]);
  add2 = fullAdd<P>(lhs[P * 2 : P], rhs[P * 2 : P], add1[P]);
  return add0[0 : P] & add1[0 : P] & add2;
};

use fullAddFunc<Tryte, Trit>;
use fullAddFunc<Tiny, Tryte>;
use fullAddFunc<Int, Tiny>;
use fullAddFunc<Huge, Int>;
use fullAddFunc<Hash, Huge>;
use fullAddFunc<Hash3, Hash>;
use fullAddFunc<Hash9, Hash3>;
use fullAddFunc<Signature, Hash9>;

template fullAdd2Func<T, P> [T + Carry] fullAdd<T> (lhs [T], rhs [T], carry [Carry]) = {
  add0 = fullAdd<P>(lhs[P * 0 : P], rhs[P * 0 : P], carry);
  add1 = fullAdd<P>(lhs[P * 1 : P], rhs[P * 1 : P], add0[P]);
  return add0[0 : P] & add1;
};

use fullAdd2Func<Trit2, Trit>;
use fullAdd2Func<Tryte2, Tryte>;
use fullAdd2Func<Tiny2, Tiny>;
use fullAdd2Func<Int2, Int>;
use fullAdd2Func<Huge2, Huge>;
