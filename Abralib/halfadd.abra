import AbraLib/types;

// LUT logic: return the sum of a trit plus a carry as a single trit plus a new carry
//            return (trit1 + carry), newcarry(trit1 + carry);
lut halfAdd [
  -,- = 1,-; // -1 + -1 =  1, carry -1
  -,0 = -,0; // -1 +  0 = -1, carry  0
  -,1 = 0,0; // -1 +  1 =  0, carry  0
  0,- = -,0; //  0 + -1 = -1, carry  0
  0,0 = 0,0; //  0 +  0 =  0, carry  0
  0,1 = 1,0; //  0 +  1 =  1, carry  0
  1,- = 0,0; //  1 + -1 =  0, carry  0
  1,0 = 1,0; //  1 +  0 =  1, carry  0
  1,1 = -,1; //  1 +  1 = -1, carry  1
];

func [Trit + Carry] halfAdd<Trit> (val [Trit], carry [Carry]) = halfAdd[val, carry];

template halfAddFunc<T, P> [T + Carry] halfAdd<T> (val [T], carry [Carry]) = {
  add0 = halfAdd<P>(val[P * 0 : P], carry);
  add1 = halfAdd<P>(val[P * 1 : P], add0[P]);
  add2 = halfAdd<P>(val[P * 2 : P], add1[P]);
  return add0[0 : P] & add1[0 : P] & add2;
};

use halfAddFunc<Tryte, Trit>;
use halfAddFunc<Tiny, Tryte>;
use halfAddFunc<Int, Tiny>;
use halfAddFunc<Huge, Int>;
use halfAddFunc<Hash, Huge>;
use halfAddFunc<Hash3, Hash>;
use halfAddFunc<Hash9, Hash3>;
use halfAddFunc<Signature, Hash9>;
