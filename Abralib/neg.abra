import AbraLib/types;

// LUT logic: return -trit1;
lut neg [
  - = 1;
  0 = 0;
  1 = -;
];

// note that making an entire trit-vector's value negative
// can be done by simply negating every trit in the vector

func [Trit] neg<Trit> (val [Trit]) = neg[val];

template negFunc<T, P> [T] neg<T> (val [T]) = {
  return neg<P>(val[P * 0 : P]) &
         neg<P>(val[P * 1 : P]) &
         neg<P>(val[P * 2 : P]);
};

use negFunc<Tryte, Trit>;
use negFunc<Tiny, Tryte>;
use negFunc<Int, Tiny>;
use negFunc<Huge, Int>;
use negFunc<Hash, Huge>;
use negFunc<Hash3, Hash>;
use negFunc<Hash9, Hash3>;
use negFunc<Signature, Hash9>;

template neg2Func<T, P> [T] neg<T> (val [T]) = {
  return neg<P>(val[P * 0 : P]) &
         neg<P>(val[P * 1 : P]);
};

use neg2Func<Trit2, Trit>;
use neg2Func<Tryte2, Tryte>;
use neg2Func<Tiny2, Tiny>;
use neg2Func<Int2, Int>;
use neg2Func<Huge2, Huge>;
