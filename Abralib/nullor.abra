import AbraLib/types;

// LUT logic: return the 2rd input trit only when 1st input trit equals 1 (true)
//            return (trit1 == 1) ? trit2 : null;
lut nullOrValue [
  1,- = -;
  1,0 = 0;
  1,1 = 1;
];


// construct functions for all predefined types that perform
// a similar task to the nullOrValue LUT for those larger types
// note that we have defined each successive type a factor 3 times bigger
// which means we can easily define each successive type in terms of three previous ones

// every nullOr<T> function returns <val> when <t> equals 1 (true), and null otherwise

// note that it may seem wasteful to define it this way, but when mapped to FPGA
// these can be translated into parallel circuitry that executes them simultaneously.
// for other architectures, Abra will allow the Abra functions to be replaced with
// a dll function that uses optimal architecture-specific instructions.
// we expect a library of common functions to be developed over time

func [Trit] nullOr<Trit> (t [Bool], val [Trit]) = nullOrValue[t, val];

template nullOrFunc<T, P> [T] nullOr<T> (t [Bool], val [T]) = {
  // concatenate the 3 separate parts via the part-specific function
  return nullOr<P>(t, val[0 * P..1 * P - 1]) &
         nullOr<P>(t, val[1 * P..2 * P - 1]) &
         nullOr<P>(t, val[2 * P..3 * P - 1]);
};

use nullOrFunc<Tryte, Trit>;
use nullOrFunc<Tiny, Tryte>;
use nullOrFunc<Int, Tiny>;
use nullOrFunc<Huge, Int>;
use nullOrFunc<Hash, Huge>;
use nullOrFunc<Hash3, Hash>;
use nullOrFunc<Hash9, Hash3>;
use nullOrFunc<Signature, Hash9>;

template nullOr2Func<T, P> [T] nullOr<T> (t [Bool], val [T]) = {
  // concatenate the 3 separate parts via the part-specific function
  return nullOr<P>(t, val[0 * P..1 * P - 1]) &
         nullOr<P>(t, val[1 * P..2 * P - 1]);
};

use nullOr2Func<Trit2, Trit>;
use nullOr2Func<Tryte2, Tryte>;
use nullOr2Func<Tiny2, Tiny>;
use nullOr2Func<Int2, Int>;
use nullOr2Func<Huge2, Huge>;
