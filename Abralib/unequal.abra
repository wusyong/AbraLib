import AbraLib/bool;
import AbraLib/types;

// LUT logic: return (Bool) (trit1 != trit2);
lut unequal [
  -,- = -;
  -,0 = 1;
  -,1 = 1;
  0,- = 1;
  0,0 = -;
  0,1 = 1;
  1,- = 1;
  1,0 = 1;
  1,1 = -;
];

func [Bool] unequal<Trit>(lhs [Trit], rhs [Trit]) = unequal[lhs, rhs];

template unequalFunc<T, P> [Bool] unequal<T>(lhs [T], rhs [T]) = {
  return or3[unequal<P>(lhs[P * 0 : P], rhs[P * 0 : P]),
             unequal<P>(lhs[P * 1 : P], rhs[P * 1 : P]),
             unequal<P>(lhs[P * 2 : P], rhs[P * 2 : P])];
};

use unequalFunc<Tryte, Trit>;
use unequalFunc<Tiny, Tryte>;
use unequalFunc<Int, Tiny>;
use unequalFunc<Huge, Int>;
use unequalFunc<Hash, Huge>;
use unequalFunc<Hash3, Hash>;
use unequalFunc<Hash9, Hash3>;
use unequalFunc<Signature, Hash9>;
