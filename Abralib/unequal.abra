import AbraLib/types;
import AbraLib/bool;

// LUT logic: return a Bool trit indicating whether the two input trits are unequal
//            return (trit1 != trit2);
lut unequal [
  -,- = 0;
  -,0 = 1;
  -,1 = 1;
  0,- = 1;
  0,0 = 0;
  0,1 = 1;
  1,- = 1;
  1,0 = 1;
  1,1 = 0;
];

func [Bool] unequal<Trit>(lhs [Trit], rhs [Trit]) = unequal[lhs, rhs];

template unequalFunc<T, P> [Bool] unequal<T>(lhs [T], rhs [T]) = {
  return or[unequal<P>(lhs[0 * P..1 * P - 1], rhs[0 * P..1 * P - 1]),
         or[unequal<P>(lhs[1 * P..2 * P - 1], rhs[1 * P..2 * P - 1]),
            unequal<P>(lhs[2 * P..3 * P - 1], rhs[2 * P..3 * P - 1])]];
};

use unequalFunc<Tryte, Trit>;
use unequalFunc<Tiny, Tryte>;
use unequalFunc<Int, Tiny>;
use unequalFunc<Huge, Int>;
use unequalFunc<Hash, Huge>;
use unequalFunc<Hash3, Hash>;
use unequalFunc<Hash9, Hash3>;
use unequalFunc<Signature, Hash9>;
