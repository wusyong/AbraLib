import AbraLib/bool;
import AbraLib/types;

// LUT logic: return (Bool) (trit1 == trit2);
lut equal [
  -,- = 1;
  -,0 = -;
  -,1 = -;
  0,- = -;
  0,0 = 1;
  0,1 = -;
  1,- = -;
  1,0 = -;
  1,1 = 1;
];

func [Bool] equal<Trit>(lhs [Trit], rhs [Trit]) = equal[lhs, rhs];

template equalFunc<T, P> [Bool] equal<T>(lhs [T], rhs [T]) = {
  return and3[equal<P>(lhs[P * 0 : P], rhs[P * 0 : P]),
              equal<P>(lhs[P * 1 : P], rhs[P * 1 : P]),
              equal<P>(lhs[P * 2 : P], rhs[P * 2 : P])];
};

use equalFunc<Tryte, Trit>;
use equalFunc<Tiny, Tryte>;
use equalFunc<Int, Tiny>;
use equalFunc<Huge, Int>;
use equalFunc<Hash, Huge>;
use equalFunc<Hash3, Hash>;
use equalFunc<Hash9, Hash3>;
use equalFunc<Signature, Hash9>;
