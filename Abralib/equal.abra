import AbraLib/types;
import AbraLib/bool;

// LUT logic: return a Bool trit indicating whether the two input trits are equal
//            return (trit1 == trit2);
lut equal [
  -,- = 1;
  -,0 = 0;
  -,1 = 0;
  0,- = 0;
  0,0 = 1;
  0,1 = 0;
  1,- = 0;
  1,0 = 0;
  1,1 = 1;
];

func [Bool] equal<Trit>(lhs [Trit], rhs [Trit]) = equal[lhs, rhs];

template equalFunc<T, P> [Bool] equal<T>(lhs [T], rhs [T]) = {
  return and[equal<P>(lhs[0 * P..1 * P - 1], rhs[0 * P..1 * P - 1]),
         and[equal<P>(lhs[1 * P..2 * P - 1], rhs[1 * P..2 * P - 1]),
             equal<P>(lhs[2 * P..3 * P - 1], rhs[2 * P..3 * P - 1])]];
};

use equalFunc<Tryte, Trit>;
use equalFunc<Tiny, Tryte>;
use equalFunc<Int, Tiny>;
use equalFunc<Huge, Int>;
use equalFunc<Hash, Huge>;
use equalFunc<Hash3, Hash>;
use equalFunc<Hash9, Hash3>;
use equalFunc<Signature, Hash9>;
